#!/usr/bin/env python3
import os
import re
import uuid
import shutil
import argparse
import base64

# Obfuscation methods
def base64_obfuscate(text):
    return base64.b64encode(text.encode()).decode()

def rot13_obfuscate(text):
    return text.translate(str.maketrans("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
                                        "NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm"))

def reverse_obfuscate(text):
    return text[::-1]

# Rename GUID and Tool Name
def replace_guid_and_name(directory, new_name):
    print("\n[*] Generating new GUID for project")
    new_guid = str(uuid.uuid4())
    print(f"[*] New project GUID: {new_guid}")

    sln_file, project_file, current_tool_name = "", "", ""

    # Identify project files
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith(".sln"):
                sln_file = os.path.join(root, file)
                current_tool_name = file.replace(".sln", "")
            elif file.endswith((".vcxproj", ".csproj")):
                project_file = os.path.join(root, file)

    if not sln_file or not project_file:
        print("[-] ERROR: Missing project files.")
        return

    print(f"[*] Updating:\n - {sln_file}\n - {project_file}")

    # Modify .sln file
    with open(sln_file, 'r') as f:
        content = f.read()
    content = content.replace(current_tool_name, new_name).replace("{GUID_PLACEHOLDER}", "{" + new_guid + "}")
    with open(sln_file, 'w') as f:
        f.write(content)

    # Modify project file
    with open(project_file, 'r') as f:
        content = f.read()
    content = content.replace(current_tool_name, new_name).replace("{GUID_PLACEHOLDER}", "{" + new_guid + "}")
    with open(project_file, 'w') as f:
        f.write(content)

    # Rename project files
    os.rename(sln_file, os.path.join(os.path.dirname(sln_file), f"{new_name}.sln"))
    os.rename(project_file, os.path.join(os.path.dirname(project_file), f"{new_name}{os.path.splitext(project_file)[1]}"))

    print(f"[+] Successfully renamed project to {new_name}")

# Obfuscate strings in code files
def obfuscate_strings(directory, method):
    print(f"[*] Obfuscating strings using {method}")

    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith((".cpp", ".h", ".cs")):
                filepath = os.path.join(root, file)
                with open(filepath, 'r', encoding="utf-8", errors="ignore") as f:
                    content = f.readlines()

                modified = False
                with open(filepath, 'w', encoding="utf-8", errors="ignore") as f:
                    for line in content:
                        matches = re.findall(r'"(.*?)"', line)
                        for match in matches:
                            if len(match) > 2:
                                if method == "base64":
                                    obfuscated = f'Base64Decode("{base64_obfuscate(match)}")'
                                elif method == "rot13":
                                    obfuscated = f'ROT13("{rot13_obfuscate(match)}")'
                                elif method == "reverse":
                                    obfuscated = f'ReverseString("{reverse_obfuscate(match)}")'
                                else:
                                    continue
                                line = line.replace(f'"{match}"', obfuscated)
                                modified = True
                        f.write(line)

                if modified:
                    print(f"[+] Obfuscated: {file}")

# Main Function
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="C# & C++ Project Obfuscator")
    parser.add_argument("-m", "--method", choices=["base64", "rot13", "reverse"], help="Obfuscation method")
    parser.add_argument("-d", "--directory", required=True, help="Project directory")
    parser.add_argument("-n", "--name", required=True, help="New project name")
    args = parser.parse_args()

    replace_guid_and_name(args.directory, args.name)
    if args.method:
        obfuscate_strings(args.directory, args.method)

    print(f"\n[+] Obfuscation complete for {args.name}!\n")
